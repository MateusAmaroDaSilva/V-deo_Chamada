<html lang="en"></html>
<head> 
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <title>Login - TalkLog</title>
    <style>
        /* Estilos gerais */
    body {
        margin: 0;
        padding: 0;
        font-family: Arial, sans-serif;
        background-color: #252525;
        color: #fff;
        display: flex;
        height: 100vh;
    }

    h3, p {
        margin: 0;
    }

    /* Divisão da tela */
    form {
        background-color: #353535;
        padding: 40px;
        border-radius: 10px;
        box-shadow: 0px 0px 15px rgba(0, 0, 0, 0.3);
        width: 100%;
        max-width: 400px;
        margin: auto;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        height: 100%;
    }

    input {
        width: 100%;
        padding: 10px;
        margin: 10px 0;
        border-radius: 5px;
        border: none;
        background-color: #252525;
        color: #fff;
        font-size: 16px;
    }

    input::placeholder {
        color: #aaa;
    }

    button {
        width: 100%;
        padding: 10px;
        background-color: #34C759;
        color: white;
        font-size: 18px;
        font-weight: bold;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

    button:hover {
        background-color: #28a745;
    }

    .text_welcome {
        text-align: center;
        margin-bottom: 20px;
    }

    /* Layout */
    .container {
        display: flex;
        flex-grow: 1;
    }

    .left-side {
        flex: 1;
        background-color: #252525;
    }

    .right-side {
        width: 400px;
        background-color: #353535;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    /* Responsividade */
    @media (max-width: 768px) {
        .right-side {
            width: 100%;
        }
    }

    @media (max-width: 480px) {
        form {
            padding: 15px;
        }

        input, button {
            font-size: 14px;
            padding: 8px;
        }
    }

        .google-login-btn {
            display: inline-flex;
            align-items: center;
            padding: 10px 20px;
            border: 1px solid #ddd;
            border-radius: 5px;
            background-color: #fff;
            color: #333;
            font-size: 16px;
            cursor: pointer;
            text-decoration: none;
            margin-top: 20px;
        }

        .google-login-btn img {
            width: 20px;
            height: 20px;
            margin-right: 10px;
        }

        .google-login-btn:hover {
            background-color: #f0f0f0;
        }
    </style>
</head>
<body>
    <center>
        <form class="loginForm" id="loginForm">
            <div class="text_welcome">
                <span><h3>Entrar</h3></span>
                <span><p>Bem-Vindo à Talk Log</p></span>
            </div>

            <div>
                <input placeholder="E-mail" id="email" name="email" type="email">
            </div>

            <div>
                <input placeholder="Password" id="password" name="password" type="password">
            </div>
            
            <div>
                <button class="sign_btn" type="submit" id="signup_btn">Sign In</button>
            </div>

            <!-- Botão de login com Google -->
            <div>
                <a class="google-login-btn" id='google' name='google'>
                    <img src="https://upload.wikimedia.org/wikipedia/commons/c/c1/Google_%22G%22_logo.svg" alt="Google Logo">
                    Login com Google
                </a>
            </div>
        </form>
    </center>

    <script>
        document.getElementById('loginForm').addEventListener('submit', async (e) => {
            e.preventDefault();

            const email = document.getElementById('email').value;
            const password = document.getElementById('password').value;

            const response = await fetch('https://api-authetication-jwt.onrender.com/login', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ email, password })
            });

            const data = await response.json();

            if (data.auth) {
                localStorage.setItem('token', data.token);
                window.location.href = 'index.html';
            } else {
                alert(data.message)
            }
        });
      
      document.getElementById('google').addEventListener('click', async function() {
            try {
                const response = await fetch('https://api-authetication-jwt.onrender.com/login/google', {
                    method: 'POST'
                });

                const data = await response.json();

                if (response.ok) {
                    
                    window.location.href = data.redirectUrl;
                } else {
                    alert('Erro ao tentar logar com Google: ' + data.message);
                }
            } catch (error) {
                console.error('Erro ao tentar logar com Google:', error);
                alert('Erro de rede ou servidor.');
            }
        });

        window.onload = function() {
        const hash = window.location.hash;
        const urlParams = new URLSearchParams(hash.substring(1));
        const token = urlParams.get('access_token');
        
        if (token) {
            
            localStorage.setItem('token', token);
            console.log('Login com Google bem-sucedido!');
            
            
            window.location.href = 'home.html';

        } else {
            console.log(Request.name, "Aguardando login com o google")
        }
    }
    </script>

</body>
</html>
------------------------------------------------------------------------------------------------------------

 <script>
        


            const token = localStorage.getItem('token');
    
            if (!token || token === null) {
                window.location.href = 'not_auth.html'; // Redireciona se não houver token
            } else {
                fetch('https://api-authetication-jwt.onrender.com/protected', {
                    method: 'GET',
                    headers: {
                        'Authorization': `Bearer ${token}` // Usa o token no formato correto
                    }
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Você não está autorizado a acessar esta página.');
                    } else {
                        console.log(response.status, 'Logado')
                    }
                    return response.json();
                });
            }
    
            async function fetchUserData() {
                try {
                    const token = localStorage.getItem('token');
                    const response = await fetch('https://api-authetication-jwt.onrender.com/user_profile', {
                        method: 'GET',
                        headers: { 'Authorization': `Bearer ${token}` }
                    });
    
                    if (!response.ok) {
                        const errorData = await response.json();
                        console.error('Erro ao buscar dados do usuário:', errorData.message);
                        return;
                    }
    
                    const [userData] = await response.json();
                    
    
                    document.getElementById('camera-off').src = userData.avatar_url;
                    document.getElementById('name').innerText = userData.name;
                    document.getElementById('email').innerText = userData.email;
                    document.getElementById('phone').innerText = userData.phone;
                    document.getElementById('institution').innerText = userData.institution;
                    
                    
    
                } catch (error) {
                    console.error('Erro na requisição:', error.message);
                }
            }
    
            fetchUserData();
                
    
            document.getElementById('edit_profile').addEventListener('click', async () => {
                window.location.href = 'edit_profile.html';
            });
    
            document.getElementById('signout').addEventListener('click', async () => {
            const response = await fetch('https://api-authetication-jwt.onrender.com/signout', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
            });
    
            const data = await response.json();
            if (data.sucess) {
                localStorage.removeItem('token');
                window.location.href = 'index.html';
            } else {
                console.error(data.message);
            }
        })
--------------------------------------------------------------------------------------------------------------
const express = require("express");
const fs = require("fs");
const path = require("path");
const record = require("node-record-lpcm16"); // Para captura de áudio
const app = express();
const port = 3000;

// Variável para manter o controle da gravação
let recordingProcess = null;

// Caminho direto para a pasta 'audio'
const audioFolder = path.join(__dirname, "audio"); // Diretório onde os arquivos de áudio serão salvos

// Garante que a pasta 'audio' exista
if (!fs.existsSync(audioFolder)) {
  fs.mkdirSync(audioFolder, { recursive: true });
  console.log("Pasta 'audio' criada.");
}

// Função para capturar logs e erros detalhados
const logError = (context, error) => {
  console.error(`[${context}]`, error.message || error);
};

// Rota para iniciar a gravação
app.get("/start-recording", (req, res) => {
  try {
    if (recordingProcess) {
      return res.status(400).json({ message: "Já existe uma gravação em andamento." });
    }

    const fileName = `audio_${Date.now()}.wav`; // Nome do arquivo com timestamp
    const filePath = path.join(audioFolder, fileName); // Caminho completo para o arquivo de áudio

    console.log(`Iniciando gravação: ${filePath}`);

    // Inicia a gravação do áudio
    const stream = fs.createWriteStream(filePath);
    recordingProcess = record
      .start({
        sampleRateHertz: 16000,
        threshold: 0, // Sem nível de detecção mínimo
        silence: 0, // Não parar por silêncio
      })
      .on("error", (err) => logError("Erro durante a gravação", err))
      .pipe(stream);

    stream.on("finish", () => console.log(`Gravação salva: ${filePath}`));
    stream.on("error", (err) => logError("Erro ao salvar o arquivo", err));

    res.json({ message: "Gravação iniciada!", filePath });
  } catch (err) {
    logError("Erro ao iniciar a gravação", err);
    res.status(500).json({ message: "Erro ao iniciar a gravação.", error: err.message });
  }
});

// Rota para parar a gravação
app.get("/stop-recording", (req, res) => {
  try {
    if (!recordingProcess) {
      return res.status(400).json({ message: "Nenhuma gravação em andamento." });
    }

    recordingProcess.stop();
    recordingProcess = null;
    res.json({ message: "Gravação parada e salva." });
  } catch (err) {
    logError("Erro ao parar a gravação", err);
    res.status(500).json({ message: "Erro ao parar a gravação.", error: err.message });
  }
});

// Rota para servir o arquivo HTML
app.get("/", (req, res) => {
  const indexPath = path.join(__dirname, "public", "index.html");
  if (!fs.existsSync(indexPath)) {
    return res.status(404).send("Arquivo index.html não encontrado.");
  }
  res.sendFile(indexPath);
});

// Rota para servir arquivos estáticos (como o JS e CSS)
app.use(express.static(path.join(__dirname, "public")));

// Inicializa o servidor
app.listen(port, () => {
  console.log(`Servidor rodando na porta ${port}`);
});
